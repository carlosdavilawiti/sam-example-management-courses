const AWS = require('aws-sdk');
AWS.config.update({region: process.env.region});
const dynamodbDoc = new AWS.DynamoDB.DocumentClient();

module.exports.getAll = (tableName) => {
	const params = {
		TableName: tableName,
	};
	return dynamodbDoc.scan(params).promise()
		.then((data) => {
			console.log('Éxito al obtener todos los registros de ' + tableName);
			return data;
		}).catch((e) => {
			console.error("Error al insertar ", e.message);
			return e;
		})
};

module.exports.get = (tableName, id) => {
	let params = {
		TableName: tableName,
		Key: id
	};
	return dynamodbDoc.get(params).promise()
		.then((data) => {
			console.log(`Éxito al obtener data de ${tableName}`)
			return data
		}).catch((e) => {
			console.error("Error al obtener de dDB ", e.message);
			return e;
		})
};

module.exports.putItemDynamoDB = (tableName, itemData) => {
	let params = {
		TableName: tableName,
		Item: itemData,
		ScanIndexForward: false
	};
	console.log(`Registrando en la tabla ${tableName} los siguientes elementos ${JSON.stringify(itemData)}`);
	return dynamodbDoc.put(params).promise()
		.then((data) => {
			console.log(`Éxito al insertar en ${tableName}`);
			return data;
		}).catch((e) => {
			console.error("Error al insertar ", e.message);
			return e;
		});
};

module.exports.deleteItemDynamoDB = (tableName, pk) => {
	const params = {
		TableName: tableName, Key: pk
	};
	return dynamodbDoc.delete(params).promise()
		.then((data) => {
			console.log(`Éxito al borrar en ${tableName}`);
			return data;
		}).catch((e) => {
			console.error("Error al borrar ", e.message);
			return e;
		});

};
